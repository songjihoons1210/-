[ GitHub ]
    - 분산 버전(코드상태) 관리 툴 제공하는 웹 서비스
    1. 웹 서비스에서 코드들을 저장하는 *코드 저장소
    2. 다양한 기업들이 사용하는 협업 플랫폼
[ 회원가입 ]
    1. https://github.com/
    2. [ sign up ] 버튼 클릭하여 회원가입 진행 *이메일 필요
[ 로그인 ]
    1. [ Sign in ] 버튼 클릭하여 로그인 진행 
    2. Dashboard 페이지 확인 

[ vscode 와 github 최초 연동 ]
    =============== (PC마다 1번) ====================
    1. vscode 왼쪽 메뉴  [소스제어] 클릭 -> windows용 git다운로드
        https://git-scm.com/downloads
    2. [ Git for Windows/x64 Setup. ] 클릭하여 설치 진행 
    3. 다운로드 된 [Git-2.49.0-64-bit.exe] 실행파일 실행 
    4. 기본설정으로 계속 [next] 버튼 클릭하여 설치 진행 -> 완료
    5. VSCODE 재실행 
    6.  vscode 왼쪽 메뉴  [소스제어] 클릭 -> [ GitHub ] 게시 -> [로그인]허용 -> 웹페이지( 깃허브페이지(로그인) ) -> [continue ]
    7. publish to github public repository (선택후) -> [확인]
    =============== ( PC마다 1번 , 자리 변경시 ) ====================
    8. vscode 상단 메뉴 [ 터미널 ] 클릭 -> [ 새 터미널 ] 
    9. 터미널 상단메뉴 [+] 옆에 [v] 클릭 -> [ git bash ]    *깃허브 전용 터미널(명령어 이용한 프로그램 사용)
        [ git user.name 확인 ] git config --global user.name
        [ git user.name 설정 ] git config --global user.name git닉네임
        [ git user.email 확인 ] git config --global user.email 
        [ git user.email 설정] git config --global user.email git아이디@이메일포함
    10. vscode 왼쪽 메뉴  [소스제어] 클릭 -> 
        1. 상단에 메시지(코드를 업로드할때 기록할 메모) 작성 
        2. [커밋]버튼 오른쪽 [v] 클릭하여 [ 커밋 및 푸시 ] 클릭  * 현재 PC에 git 완료 
    *[ 원격 추가 ] 버튼 클릭 -> (tj2025a_front) 해당 폴터명 선택 -> main(원격) 추가
    =============== ( PC마다 1번 , 자리 변경시 ) ====================

[ 주요 용어 ]
    1. repository : 저장소 *코드들을 저장하는 하나의 저장소 * 주로 프로젝트 단위
    2. commit(커밋) : 코드 수정를 (로컬PC) 완료 * 로컬pc에만 완료되고 온라인(웹깃허브) 에는 반영이 안된다.
    3. push(푸시) : 현재 로컬 코드를 깃허브(웹서비스)에 반영 작업
    4. pull(풀) : 현재 웹서비스 버전으로 로컬 상태를 새로고침
    
[ 깃허브( 웹[VCS] 서비스 ) ]
    - [학원 : 로컬PC] C:\Users\tj-bu-702-teacher\Desktop\tj2025A_front
    - [집 : 로컬PC ] C:\Users\집컴퓨터\Desktop\tj2025A_front
    - 예]
        1. 학원에서 18:20 commit/push ---> 웹서비스 v1.1
        2. 집에서 20:00 pull --> 집PC v1.1
        3. 집에서 22:00 commit/push ---> 웹서비스 v1.2
        4. 다음날 학원 에서 9:30 pull ---> 학원PC v1.2
        5. 학원에서 18:20 commit/push ---> 웹서비스 v1.3
        6. 집에서 20:00 pull -> 집pc v1.3
    -------------------------------------------------------------------
    * 관례적으로 코드 작업 하기전에 'pull' 기능 이용하여 깃허브 버전 상태 최신화

[ 자리 변경 ]
* 로그아웃 전에 꼭 commit/push
(1) [ VSCODE 깃 로그아웃 ]
    1. 왼쪽 하단 메뉴 [ 계정 ] 클릭 
    2. 로그인된 아이디 -> [로그아웃]

(2) [ 현재pc 깃 로그아웃 ]
    1. 윈도우 찾기 검색창 : '자격증명관리자' 검색후 
    2. (제어판)자격증명관리자 에서 [window 자격 증명] 클릭 
    3. 하단 '일반 자격 증명' 목록에서 'git:http~~~' 클릭후 제거

(3)
	[ 브라우저 깃 로그아웃 ]
	[ 개인 카카오톡 / 이메일 로그아웃 ]
	[ 개인 파일/폴더 삭제 ]

[ 자리 변경후 ]
(1) 리포지토리 가져오기 
    1. 왼쪽 메뉴 -> [ 소스 제어 ] 클릭
    2. [리포지토리 복제] 클릭 
    3. [gitHub 에서 복제] 클릭 -> 로그인 [허용]
    4. 웹에서 로그인 인증
    5. 가져올 리포지토리 명 선택
-------------------------------
(2) commit 계정정보 변경 
    1. vscode 상단 메뉴 [ 터미널 ] 클릭 -> [ 새 터미널 ] 
    9. 터미널 상단메뉴 [+] 옆에 [v] 클릭 -> [ git bash ]    *깃허브 전용 터미널(명령어 이용한 프로그램 사용)
        [ git user.name 확인 ] git config --global user.name
        [ git user.name 설정 ] git config --global user.name git닉네임
        [ git user.email 확인 ] git config --global user.email 
        [ git user.email 설정] git config --global user.email git아이디@이메일포함
(3) 자리변경후 최초 커밋/푸시
    1. 브라우저 로그인
=================================================================================================================
[ 팀 깃 저장소 만들기 ]
    ------ 초대 하는 사람 입장 
    1. 새로운 폴더 생성
    2. 임의 파일 생성  
    3. 해당 폴더(프로젝트) 를 깃허브 게시 하기. [GITHUB 게시]
    4. 'public' 저장소 권장
    5. 팀 깃 저장소에 팀원 초대하기.
        (1) 깃 웹페이지 저장소에서 [Settings] 메뉴 클릭 
        (2) 사이드바 메뉴 [Collaborators ] 메뉴 클릭 
        (3) [add people ] 클릭 -> 초대할 사람 계정 검색
    ------ 초대 받는 사람 입장 
            (방법1) 깃 웹페이지 상단 프로필 왼쪽 [아이콘] 클릭 
            (방법2) 깃으로 연동된 이메일 확인 
            (1) 초대 승인
            (2) vscode 새창 열기 
            (3) 소스제어 --> 리포지토리 복제 --> 초대받은 저장소 검색 --> 복제 
    ------ 모든 사람
        * 브랜치(독립적인 작업 흐름/공간) 생성
        * 각 팀원 1명당 하나씩 브랜치 생성 ( 서로 다른 브랜치 끼리는 영향 없다. )
        (1) 브랜치 생성 
            소스제어 --> ···(기타작업) --> 분기(브랜치) --> [새분기/브랜치 만들기] -> 브랜치명 아무거나.
            (확인) : vscode 하단 표시줄에 브랜치(분기)명 확인 
        (2) 브랜치 생성후 최초 commit/push 
    
    ------ 다른 브랜치의 코드 (풀)가져오기 
            소스제어 --> ···(기타작업) --> 풀,푸시 -> 가져올 위치 -> 해당 브랜치(분기) 선택

* 프로젝트 코드를 저장할 저장소를 생성후 팀원 및 강사(itdanjalog) 초대.


    [ VSCode 에서 깃의 브랜치 활용 ]
        1. VSCODE 하단표시줄 왼쪽에 '브랜치명'(main) 확인한다.
        2. 해당 브랜치명 클릭 후 체크아웃(변경)할 브랜치명 선택.
            * 체크아웃 할때 주의할점 : commit/push 최종으로 한다.

    [ 팀 작업 ]
        1. 본인 브랜치 확인 , 본인 확인 후 체크아웃
            * 만일 다른 브랜치가 화면에 보이지 않는경우 : [기타작업] -> [패치]
    
    [ 팀원 ]
        2. 각 브랜치들은 취합시간(팀규칙) 까지 자유롭게 코드 작성후 commit/push

    [ 취업담당자 ] ex) 18:10
    3. 취합담당자는 main 브랜치로 체크아웃 한다.
    4  [기타작업] -> [풀 ] - > [가져올위치 ] -> [취합할브랜치명] 선택
        * 단] 같은 파일내 서로 다른 코드가 존재하면 충돌 , [병합편집기] 이용하여 최종 코드 완성한다. 
    5. 문제 없을경우 [커밋/푸시] 한다.
        -> 4/5 번 *반복* : 모든 팀원의 브랜치를 취합한다.
    6. 모든 브랜치를 가져왔으면 취합담당자 도 본인 브랜치로 이동.

    
    [ 팀원 ]    18 : 20
    7. 각 브랜치에서 [ 기타작업 ] -> [ 풀 ] -> [가져올위치] -> [main] 선택
    8. 문제 없을경우 [ 커밋/푸시] 한다.
        [ 2 ~ 8번 반복~~~~ ] 

[ 조 실습 ]
    1. 취합담당자가 프로젝트 폴더내 '브랜치실습.html' 하나 생성한다. [커밋/푸시]
    2. 각 팀원들은 각 브랜치(취합담당자포함)에서 'main' 브랜치 풀 한다.
    3. 팀원 1명단 애국가 1절씩 담당하여 '브랜치실습.html' 작성한다. 주석포함 [커밋/푸시]
    4. 취합담당자가 main 브랜치로 이동하여 각 브랜치를 취합한다. [커밋/푸시]
    5. main 브랜치에서 최종 취합 종료
    6. 각 팀원들의 각 브랜치에서 main 브랜치를 풀 한다. [풀]

[ git page ]
    - github 저장소에 코드를 호스팅(서버) 하기 , *다른 pc 접속 가능
    - HTML/CSS/JS 단순한 페이지 혹은 프론트엔드
    1. 사용처 :
        1) 프론트엔드 포토폴리오
        2) 간단한 회사 소개 홈페이지 (*백엔드 없는)
    2. 활성화
        1) gitpage 만들 저장소 웹 페이지 접속

        2) 상단메뉴 [settings] 선택
        3) 사이드메뉴 [pages] 클릭 -> 'GitHub Pages'
        4) [Branch] -> [none]목록 클릭 -> '배포할 브랜치 선택' 후 -> [save]
        5) 1분~3분 대기후 F5새로고침
        6) 저장소의 호스팅 웹페이지 주소 발급
        
        7) 루트(최상위)경로 주소 : 저장소에 index.html 파일 필요.
    


